// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(uuid())
  username            String    @unique
  email               String    @unique
  password            String
  spotifyId           String?   @unique // Spotify User ID
  spotifyAccessToken  String?   // Access Token do Spotify
  spotifyRefreshToken String?   // Refresh Token do Spotify
  spotifyAccessTokenExpiresAt DateTime?

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  playlists           Playlist[]
  favorites           Favorite[]
}

model Playlist {
  id          String     @id @default(uuid())
  name        String
  description String?
  isPublic    Boolean    @default(false)
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tracks      PlaylistTrack[] // Relação para as músicas na playlist
}

model Track {
  id             String          @id @default(uuid())
  spotifyTrackId String          @unique // ID da música no Spotify
  title          String
  artist         String
  album          String
  durationMs     Int
  imageUrl       String?
  previewUrl     String?         // URL de preview da música
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  playlistTracks PlaylistTrack[]
  favorites      Favorite[]
}

model PlaylistTrack {
  id         String   @id @default(uuid())
  playlistId String
  trackId    String
  addedAt    DateTime @default(now())
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId]) // Garante que uma música não seja adicionada múltiplas vezes na mesma playlist
}

model Favorite {
  id      String   @id @default(uuid())
  userId  String
  trackId String
  addedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  track   Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId]) // Garante que um usuário não favorite a mesma música múltiplas vezes
}
